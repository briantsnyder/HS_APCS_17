/**
 * Purpose: Using a list of movies you own or wish to see, sort them 
 * based on title, year created, or movie studio. Use the selection sort 
 * algorithm to reorder the collection as requested in ascending or 
 * descending order.
 *
 * Brian Snyder
 * 3/8/18
 *
 */
public class Movie
{
    // instance variables
    private int year;
    private String title;
    private String studio;

    // Constructor for objects of class Movie
    public Movie(String title, int year, String studio)
    {
        // initialize instance variables
        this.title = title;
        this.year = year;
        this.studio = studio;
    }

    public String getTitle()
    {
        return title;
    }
    
    public void setTitle(String title)
    {
        this.title = title;
    }
    
    public String getStudio()
    {
        return studio;
    }
    
    public void setStudio(String studio)
    {
        this.studio = studio;
    }
    
    public int getYear()
    {
        return year;
    }
   
    public void setYear(int year)
    {
        this.year = year;
    }
   
    public String toString()
    {
        String str = String.format("%-30s %4d   %-20s", title, year, studio);
        return str;
    }
}


/**
 * Tester class that sorts Movie objects
 *
 * Brian Snyder
 * 3/8/18
 */
public class testerClassV3 {
    public static void main(String args[]) {
        // declares array
        Movie[] movies = new Movie[10];
        // initializes elements of array
        movies[0] = new Movie("Thor: Ragnarok", 2017, "Marvel Studios");
        movies[1] = new Movie("Black Panther", 2017, "Marvel Studios");
        movies[2] = new Movie("Wonder Woman", 2016, "Warner Bros. Pictures");
        movies[3] = new Movie("Avatar", 2009, "Lightstorm Entertainment");
        movies[4] = new Movie("Miracle", 2004, "Walt Disney Pictures");
        movies[5] = new Movie("Star Wars: The Last Jedi", 2017, "Walt Disney Pictures");
        movies[6] = new Movie("Captain America", 2011, "Marvel Studios");
        movies[7] = new Movie("Iron Man", 2008, "Marvel Studios");
        movies[8] = new Movie("The Avengers", 2012, "Marvel Studios");
        movies[9] = new Movie("Jaws" ,1975, "Universal Pictures");
        // prints results
        System.out.println("    <<<< Before Sorting >>>> \n");
        printResults(movies);
        
        System.out.println("\n    <<<< After Sorting >>>>");
        System.out.println("<<<< by title in ascending order >>>>\n");
        sortTitle(movies, 1);
        printResults(movies);
        
        System.out.println("\n    <<<< After Sorting >>>>");
        System.out.println("<<<< by title in descending order >>>>\n");
        sortTitle(movies, 2);
        printResults(movies);
        
        System.out.println("\n    <<<< After Sorting >>>>");
        System.out.println("<<<< by yeat in ascending order >>>>\n");
        sortYear(movies, 1);
        printResults(movies);
        
        System.out.println("\n    <<<< After Sorting >>>>");
        System.out.println("<<<< by year in descending order >>>>\n");
        sortYear(movies, 2);
        printResults(movies);
        
        System.out.println("\n    <<<< After Sorting >>>>");
        System.out.println("<<<< by studio in ascending order >>>>\n");
        sortStudio(movies, 1);
        printResults(movies);
        
        System.out.println("\n    <<<< After Sorting >>>>");
        System.out.println("<<<< by studio in descending order >>>>\n");
        sortStudio(movies, 2);
        printResults(movies);
    }
    // method that prints the array of movies
    public static void printResults(Movie[] movies) {
        for (int i = 0; i < movies.length; i++) {
            System.out.println(movies[i]);
        }
    }
    // method that sorts array based off title
    // other mehtods are the same except that omapre differnet variables
    // of movie objects
    public static void sortTitle(Movie[] movies, int num) {
        int i; 
        int k;
        int posMax;
        Movie temp;
        if (num == 1) {
            for (i = movies.length-1; i >= 0; i--) {
                posMax = 0;
                // find largest element in the i elements
                for (k = 0; k <= i; k++) {
                    if (movies[k].getTitle().compareTo(movies[posMax].getTitle()) > 0) {
                        posMax = k;
                    }
                }
                // swap the item with the largest cost 
                // with the element in position i
                // now the item is in its proper location
                temp = movies[i];
                movies[i] = movies[posMax];
                movies[posMax] = temp;
            }
            // same code but for descending
        } else if (num == 2) {
            for (i = movies.length-1; i >= 0; i--) {
                posMax = 0;
                for (k = 0; k <= i; k++) {
                        if (movies[k].getTitle().compareTo(movies[posMax].getTitle()) < 0) {
                            posMax = k;
                        }
                }
                temp = movies[i];
                movies[i] = movies[posMax];
                movies[posMax] = temp;
            }
        }
    }
    // method that sorts movies based off year
    public static void sortYear(Movie[] movies, int num) {
        int i; 
        int k;
        int posMax;
        Movie temp;
        if (num == 1) {
            for (i = movies.length-1; i >= 0; i--) {
                posMax = 0;
                for (k = 0; k <= i; k++) {
                    if (movies[k].getYear() > movies[posMax].getYear()) {
                        posMax = k;
                    }
                }
                temp = movies[i];
                movies[i] = movies[posMax];
                movies[posMax] = temp;
            }
        } else if (num == 2) {
            for (i = movies.length-1; i >= 0; i--) {
                posMax = 0;
                for (k = 0; k <= i; k++) {
                        if (movies[k].getYear() < movies[posMax].getYear()) {
                            posMax = k;
                        }
                }
                temp = movies[i];
                movies[i] = movies[posMax];
                movies[posMax] = temp;
            }
        }
    }
    // method that sorts movies based off studio
    public static void sortStudio(Movie[] movies, int num) {
        int i; 
        int k;
        int posMax;
        Movie temp;
        if (num == 1) {
            for (i = movies.length-1; i >= 0; i--) {
                posMax = 0;
                for (k = 0; k <= i; k++) {
                    if (movies[k].getStudio().compareTo(movies[posMax].getStudio()) > 0) {
                        posMax = k;
                    }
                }
                temp = movies[i];
                movies[i] = movies[posMax];
                movies[posMax] = temp;
            }
        } else if (num == 2) {
            for (i = movies.length-1; i >= 0; i--) {
                posMax = 0;
                for (k = 0; k <= i; k++) {
                        if (movies[k].getStudio().compareTo(movies[posMax].getStudio()) < 0) {
                            posMax = k;
                        }
                }
                temp = movies[i];
                movies[i] = movies[posMax];
                movies[posMax] = temp;
            }
        }
    }
}
