/**
 * Class for a grocery store item
 *
 * Brian Snyder
 * 3/8/18
 */
public class Item {
    // initializes private instant variables
    private String name;
    private int productNum, quantity;
    private double price;
    // constructor
    public Item(String name, int productNum, int quantity, double price) {
        this.name = name;
        this.productNum = productNum;
        this.quantity = quantity;
        this.price = price;
    }
    // getter method for name
    public String getName() {
        return name;
    }
    // setter method for name
    public void setName(String name) {
        this.name = name;
    }
    // getter method for product number
    public int getProductNum() {
        return productNum;
    }
    // setter method for product number
    public void setProductNum(int productNum) {
        this.productNum = productNum;
    }
    // getter method for quantity
    public int getQuantity() {
        return quantity;
    }
    // setter method for quantity
    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }
    // getter method for price
    public double getPrice() {
        return price;
    }
    // setter method for price
    public void setPrive(double price) {
        this.price = price;
    }
    // overriden toString method
    public String toString() {
        String product = String.format("%-10s %5d %5d %5s %5.2f", name, productNum,
                         quantity, "$", price);
        return product;
    }
}

/**
 * Tester class that sorts objects from Item class using various sorting methods
 *
 * Brian Snyder
 * 3/8/18
 */
public class testerClass {
    public static void main( String args[]) {
        // initializes array
        Item[] products = new Item[10];
        products[0] = new Item("Apple", 3078, 3, 1.78);
        products[1] = new Item("Banana", 4011, 10, 5.44);
        products[2] = new Item("Cookies", 7890, 1, 9.99);
        products[3] = new Item("Cherrios", 6790, 1, 5.67);
        products[4] = new Item("Milk", 1043, 2, 7.62);
        products[5] = new Item("Eggs", 1050, 1, 12.34);
        products[6] = new Item("Carrots", 3678, 7, 15.98);
        products[7] = new Item("Bread", 6032, 1, 3.47);
        products[8] = new Item("Porkchops", 9802, 3, 30.47);
        products[9] = new Item("Soup", 2087, 4, 12.97);
        // print results
        System.out.println("    <<<< Before Sorting >>>> \n");
        printResults(products);
        // insertion ascending
        System.out.println("\n    <<<< After Sorting >>>>");
        System.out.println("<<<< by name in ascending order with Insertion method >>>>\n");
        products = sortName(products, 1);
        printResults(products);
        // insertion descending
        System.out.println("\n    <<<< After Sorting >>>>");
        System.out.println("<<<< by name in descending order with Insertion method >>>>\n");
        products = sortName(products, 2);
        printResults(products);
        // selection ascending
        System.out.println("\n    <<<< After Sorting >>>>");
        System.out.println("<<<< by product number in ascending order with Selection method >>>>\n");
        sortProductNum(products, 1);
        printResults(products);
        // selection descending
        System.out.println("\n    <<<< After Sorting >>>>");
        System.out.println("<<<< by product number in descending order with Selection method >>>>\n");
        sortProductNum(products, 2);
        printResults(products);
        // merge sort
        System.out.println("\n    <<<< After Sorting >>>>");
        System.out.println("<<<< by price in ascending order with Merge method >>>>\n");
        mergeSortPrice(products, 0, products.length-1);
        printResults(products);
        // insertion ascending
        System.out.println("\n    <<<< After Sorting >>>>");
        System.out.println("<<<< by quantity in ascending order with Insertion method >>>>\n");
        products = sortQuantity(products, 1);
        printResults(products);
        // insertion descending
        System.out.println("\n    <<<< After Sorting >>>>");
        System.out.println("<<<< by quantity in descending order with Insertion method >>>>\n");
        products = sortQuantity(products, 2);
        printResults(products);
    }
    // method that prints each element of array
    public static void printResults(Item[] products) {
        for (int i = 0; i < products.length; i++) {
            System.out.println(products[i]);
        }
    }
    // insertion sort method, sorting name of product - Insertion Sort
    public static Item[] sortName(Item[] products, int num) {
        Item[] dest = new Item[products.length];
        for (int i = 0; i < products.length; i++) {
            Item next = products[i];
            int insertIndex = 0;
            int k = i;
            while(k > 0 && insertIndex == 0) {
                if (num == 1) { // ascending
                    if (next.getName().compareTo(dest[k-1].getName()) > 0) {
                        insertIndex = k;
                    } else {
                        dest[k] = dest[k-1];
                    }
                    k--;
                } else if (num == 2) { // descending
                    if (next.getName().compareTo(dest[k-1].getName()) < 0) {
                        insertIndex = k;
                    } else {
                        dest[k] = dest[k-1];
                    }
                    k--;
                }
            }
            dest[insertIndex] = next;
        }
        return dest;
    }
    // selection sort method, sorting product number - Selecton Sort
    public static void sortProductNum(Item[] products, int num) {
        int i;
        int k;
        int posMax;
        Item temp;
        if (num ==1) { // ascending
            for (i = products.length-1; i>= 0; i--) {
                posMax = 0;
                for (k = 0; k <= i; k++) {
                    if (products[k].getProductNum() > products[posMax].getProductNum()) {
                        posMax = k;
                    }
                }
                temp = products[i];
                products[i] = products[posMax];
                products[posMax] = temp;
            }
        } else if (num == 2) { // descending
            for (i = products.length-1; i>= 0; i--) {
                posMax = 0;
                for (k = 0; k <= i; k++) {
                    if (products[k].getProductNum() < products[posMax].getProductNum()) {
                        posMax = k;
                    }
                }
                temp = products[i];
                products[i] = products[posMax];
                products[posMax] = temp;
            }
        }
    }
    // method that recursively divides for sorting price - Merge Sort
    public static void mergeSortPrice(Item[] products, int low, int high) {
        if (low == high) {
            return;
        }
        int mid = (low + high) / 2;
        mergeSortPrice(products, low, mid);
        mergeSortPrice(products, mid+1,high);
        mergePrice(products, low, mid, high);
    }
    // method that merges divisions and oranizes them for proce sorting - Merge Sort
    public static void mergePrice(Item[] products, int low, int mid, int high) {
        Item[] temp = new Item[high-low+1];
        int i = low;
        int j = mid+1;
        int n = 0;
        while(i <= mid || j <= high) {
            if (i > mid) {
                temp[n] = products[j];
                j++;
            } else if (j > high) {
                temp[n] = products[i];
                i++;
            } else if (products[i].getPrice() < products[j].getPrice()) {
                temp[n] = products[i];
                i++;
            } else {
                temp[n] = products[j];
                j++;
            }
            n++;
        }
        for (int k = low; k <= high; k++) {
            products[k] = temp[k-low];
        }
    }
    // insertion method for sorting quantity - Insertion Sort
    public static Item[] sortQuantity(Item[] products, int num) {
        Item[] dest = new Item[products.length];
        for (int i = 0; i < products.length; i++) {
            Item next = products[i];
            int insertIndex = 0;
            int k = i;
            while(k > 0 && insertIndex == 0) {
                if (num == 1) { // ascending
                    if (next.getQuantity() > dest[k-1].getQuantity()) {
                        insertIndex = k;
                    } else {
                        dest[k] = dest[k-1];
                    }
                    k--;
                } else if (num == 2) { // descending
                    if (next.getQuantity() < dest[k-1].getQuantity()) {
                        insertIndex = k;
                    } else {
                        dest[k] = dest[k-1];
                    }
                    k--;
                }
            }
            dest[insertIndex] = next;
        }
        return dest;
    }
}
